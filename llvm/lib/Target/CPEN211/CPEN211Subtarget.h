//===-- CPEN211Subtarget.h - Define Subtarget for the MSP430 ----*- C++
//-*--===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the CPEN211 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_CPEN211_MSP430SUBTARGET_H
#define LLVM_LIB_TARGET_CPEN211_MSP430SUBTARGET_H

#include "CPEN211FrameLowering.h"
#include "CPEN211ISelLowering.h"
#include "CPEN211InstrInfo.h"
#include "CPEN211RegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "CPEN211GenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class CPEN211Subtarget : public CPEN211GenSubtargetInfo {
public:
  enum HWMultEnum { NoHWMult, HWMult16, HWMult32, HWMultF5 };

private:
  virtual void anchor();
  bool ExtendedInsts = false;
  HWMultEnum HWMultMode = NoHWMult;
  CPEN211InstrInfo InstrInfo;
  CPEN211TargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;
  CPEN211FrameLowering FrameLowering;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  CPEN211Subtarget(const Triple &TT, const std::string &CPU,
                   const std::string &FS, const TargetMachine &TM);

  CPEN211Subtarget &initializeSubtargetDependencies(StringRef CPU,
                                                    StringRef FS);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  bool hasHWMult16() const { return HWMultMode == HWMult16; }
  bool hasHWMult32() const { return HWMultMode == HWMult32; }
  bool hasHWMultF5() const { return HWMultMode == HWMultF5; }

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const CPEN211InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const CPEN211RegisterInfo *getRegisterInfo() const override {
    return &getInstrInfo()->getRegisterInfo();
  }

  const CPEN211TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
};
} // namespace llvm

#endif // LLVM_TARGET_CPEN211_SUBTARGET_H
